<?xml version="1.0"?>
<component>
    <registration
        progid="JSON.Parser"
        classid="{F2D1C5F1-9D6B-4F9A-8AFA-B95C3D4EAA13}"
        version="1.0"
    />

    <public>
        <method name="ParseJson">
            <parameter name="jsonString" type="string"/>
            <returns type="object"/>
        </method>
        <method name="Stringify">
            <parameter name="jsonObject" type="object"/>
            <returns type="string"/>
        </method>
    </public>

    <script language="VBScript">
    Option Explicit

    ' --- Class Initialization ---
    Private Sub Class_Initialize()
    End Sub

    Private Sub Class_Terminate()
    End Sub

    ' --- Public Method: Parse JSON to Object (with Security Fixes) ---
    Public Function ParseJson(jsonString)
        Dim objResult, errorMessage
        Set objResult = Nothing
        errorMessage = ""

        ' Limit JSON size to prevent DoS attacks
        If Len(jsonString) > 1048576 Then
            Set ParseJson = BuildErrorJson("Error: JSON exceeds maximum size limit.")
            Exit Function
        End If

        jsonString = Trim(jsonString)
        If jsonString = "" Then
            Set ParseJson = BuildErrorJson("Error: JSON string is empty.")
            Exit Function
        End If

        ' Validate JSON format
        If Left(jsonString, 1) = "{" And Right(jsonString, 1) = "}" Then
            Set objResult = ParseJsonObject(Mid(jsonString, 2, Len(jsonString) - 2), errorMessage, 1)
        ElseIf Left(jsonString, 1) = "[" And Right(jsonString, 1) = "]" Then
            Set objResult = ParseJsonArray(Mid(jsonString, 2, Len(jsonString) - 2), errorMessage, 1)
        Else
            Set ParseJson = BuildErrorJson("Error: Invalid JSON format.")
            Exit Function
        End If

        ' Return parsed result or error response
        If errorMessage <> "" Then
            Set ParseJson = BuildErrorJson(errorMessage)
        Else
            Set ParseJson = objResult
        End If
    End Function

    ' --- Internal: Build JSON Error Response ---
    Private Function BuildErrorJson(errorMessage)
        Dim objError
        Set objError = CreateObject("Scripting.Dictionary")
        objError.Add "error", errorMessage
        Set BuildErrorJson = objError
    End Function

    ' --- Internal: Prevent Dangerous JSON Keys ---
    Private Function IsSafeKey(key)
        Dim forbidden
        forbidden = Array("eval", "execute", "msgBox", "call", "script", "onerror", "alert", "wscript.shell")

        Dim i
        For i = 0 To UBound(forbidden)
            If LCase(key) = forbidden(i) Then
                IsSafeKey = False
                Exit Function
            End If
        Next
        IsSafeKey = True
    End Function

    </script>
</component>
